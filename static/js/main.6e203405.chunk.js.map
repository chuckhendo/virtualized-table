{"version":3,"sources":["generateContent.js","getStringWidth.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["COLUMN_COUNT","ROW_COUNT","context","document","createElement","getContext","Input","styled","input","Table","content","onChange","columnWidths","useMemo","data","map","_","colIndex","rowColumnWidths","row","inputText","font","width","measureText","Math","ceil","getStringWidth","max","gridRef","useRef","updateContent","e","target","dataset","rowId","colIndexString","col","parseInt","value","current","resetAfterColumnIndex","Cell","columnIndex","rowIndex","style","data-col","data-row-id","id","height","columnCount","length","columnWidth","index","console","log","rowCount","rowHeight","ref","initialContent","Array","fill","faker","random","uuid","lorem","sentence","number","min","App","useState","setContent","sortAsc","setSortAsc","sortedContent","sort","rowA","rowB","localeCompare","onClick","findIndex","newCols","newRow","newContent","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e203405.chunk.js","sourcesContent":["import faker from 'faker';\n\nconst COLUMN_COUNT = 10;\nconst ROW_COUNT = 500;\n\nexport default function generateContent() {\n  return new Array(ROW_COUNT).fill(0).map(() => ({\n    id: faker.random.uuid(),\n    data: new Array(COLUMN_COUNT)\n      .fill(0)\n      .map(() => faker.lorem.sentence(faker.random.number({ min: 1, max: 5 })))\n  }));\n}\n","const canvas = document.createElement('canvas');\nconst context = canvas.getContext('2d');\n\nexport default function getStringWidth(inputText) {\n  context.font = `16px \"Helvetica Neue\"`;\n  const width = context.measureText(inputText).width;\n  return Math.ceil(width) + 10;\n}\n","import React, { useMemo, useRef } from 'react';\nimport styled from 'styled-components';\nimport { VariableSizeGrid as Grid } from 'react-window';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport getStringWidth from './getStringWidth';\n\nconst Input = styled.input`\n  font-size: 16px;\n  font-family: 'Helvetica Neue';\n`;\n\nexport default function Table({ content, onChange }) {\n  const columnWidths = useMemo(() => {\n    return content[0].data.map((_, colIndex) => {\n      const rowColumnWidths = content.map(row => {\n        return getStringWidth(row.data[colIndex]);\n      });\n\n      return Math.max(...rowColumnWidths);\n    });\n  }, [content]);\n\n  const gridRef = useRef();\n\n  function updateContent(e) {\n    const { rowId, col: colIndexString } = e.target.dataset;\n    const colIndex = parseInt(colIndexString);\n    onChange(e.target.value, rowId, colIndex);\n\n    gridRef.current.resetAfterColumnIndex(colIndex);\n  }\n\n  const Cell = ({ columnIndex, rowIndex, style }) => {\n    const row = content[rowIndex];\n    return (\n      <Input\n        style={style}\n        value={row.data[columnIndex]}\n        data-col={columnIndex}\n        data-row-id={row.id}\n        onChange={updateContent}\n      />\n    );\n  };\n\n  return (\n    <AutoSizer>\n      {({ height, width }) => (\n        <Grid\n          columnCount={content[0].data.length}\n          columnWidth={index => {\n            console.log(index);\n            return columnWidths[index];\n          }}\n          height={height}\n          rowCount={content.length}\n          rowHeight={index => 30}\n          width={width}\n          ref={gridRef}\n        >\n          {Cell}\n        </Grid>\n      )}\n    </AutoSizer>\n  );\n}\n","import React, { useState, useMemo, useRef } from 'react';\n\nimport generateContent from './generateContent';\nimport './App.css';\nimport Table from './Table';\n\nconst initialContent = generateContent();\n\nfunction App() {\n  const [content, setContent] = useState(initialContent);\n  const [sortAsc, setSortAsc] = useState(true);\n\n  const sortedContent = [...content].sort((rowA, rowB) => {\n    if (sortAsc) {\n      return rowA.data[0].localeCompare(rowB.data[0]);\n    }\n\n    return rowB.data[0].localeCompare(rowA.data[0]);\n  });\n\n  function sort() {\n    setSortAsc(!sortAsc);\n  }\n\n  function updateContent(value, rowId, colIndex) {\n    const rowIndex = content.findIndex(row => row.id === rowId);\n    const newCols = content[rowIndex].data.map((col, index) => {\n      if (index === colIndex) {\n        return value;\n      }\n\n      return col;\n    });\n    const newRow = { ...content[rowIndex], data: newCols };\n    const newContent = content.map((row, index) => {\n      if (index === rowIndex) {\n        return newRow;\n      }\n\n      return row;\n    });\n\n    setContent(newContent);\n  }\n\n  return (\n    <>\n      <button onClick={sort}>Sort</button>\n      <Table content={sortedContent} onChange={updateContent} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}